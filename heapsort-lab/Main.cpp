#include "Enum.h" // Подключение пользовательских заголовочных файлов
#include "Interface.h"
#include "Input.h"
#include "ForFIle.h"
#include "heap.h"
#include "Tests.h"

using namespace std; // Использование стандартного пространства имен

int main() { // Основная функция программы
    setlocale(LC_ALL, "Russian"); // Установка локали на русский язык

    showInfo(); // Вывод информации о программе

    Test test; // Создание объекта для тестирования
    test.runTests(); // Запуск тестов

    int choice = 0; // Объявление переменных
    int secondChoice = 0;
    int size = 0;

    vector<double> Array; // Создание вектора для хранения данных
    string fileName = ""; // Имя файла

    do { // Начало основного цикла программы
        showMenu(); // Вывод меню программы
        cout << "Ваш выбор: "; // Приглашение на ввод выбора пользователя
        choice = getInt(); // Получение выбора пользователя

        switch (choice) { // Обработка выбора пользователя
        case MENU_ITEM::ADD: // Если выбрано добавление данных
            showSecondMenu(); // Вывод вторичного меню
            cout << "Ваш выбор: ";
            secondChoice = getInt(); // Получение выбора второго уровня

            switch (secondChoice) { // Обработка второго уровня выбора
            case SECOND_MENU_ITEM::FILe: // Если выбрано добавление данных из файла
                Array.clear(); // Очистка массива
                cout << "\nВведите название файла:" << endl; // Приглашение на ввод имени файла
                getline(cin, fileName); // Получение имени файла
                Array = uploadFromFile(fileName); // Загрузка данных из файла
                cout << "Данные успешно загружены" << endl; // Сообщение об успешной загрузке
                break;

            case SECOND_MENU_ITEM::RANDOM: // Если выбрано создание случайных данных
                Array.clear(); // Очистка массива
                cout << "Введите количество элементов массива: " << endl; // Приглашение на ввод размера массива
                size = getPositiveInt(); // Получение положительного значения от пользователя
                Array = getRandomArray(size); // Создание случайных данных
                cout << "Массив успешно заполнен" << endl; // Сообщение о успешном заполнении массива
                break;

            case SECOND_MENU_ITEM::BACK: // Если выбрано вернуться назад
                break;

            default: // В случае некорректного ввода
                cout << "Неправильный ввод. Попробуйте снова." << endl; // Сообщение об ошибке
                break;
            }
            break;

        case MENU_ITEM::SORT: // Если выбрана операция сортировки
            if (!Array.empty()) { // Если массив не пустой
                cout << "Начальный массив:" << endl; // Вывод начального массива
                for (int i = 0; i < Array.size(); i++) { // Перебор элементов массива
                    cout << Array[i] << " "; // Вывод элементов массива
                }

                heap<double> Heap; // Создание объекта для работы с кучей
                Heap.makeHeap(Array); // Преобразование массива в кучу
                Array = Heap.heapSort(); // Сортировка кучи

                cout << "\nОтсортированный массив:" << endl; // Вывод отсортированного массива
                for (int i = 0; i < Array.size(); i++) { // Перебор элементов отсортированного массива
                    cout << Array[i] << " "; // Вывод элементов отсортированного массива
                }
                cout << endl;
            }
            else { // Если массив пустой
                cout << "Нет данных" << endl << endl; // Сообщение о пустом массиве
            }
            break;

        case MENU_ITEM::SAVE: // Если выбрана операция сохранения
            if (!Array.empty()) { // Если массив не пустой
                cout << "\nВведите название файла:" << endl; // Приглашение на ввод имени файла
                getline(cin, fileName); // Получение имени файла
                getFilePath(fileName); // Получение пути для сохранения файла

                saveArray(Array, fileName); // Сохранение массива в файл
                cout << "Начальный массив сохранен" << endl; // Сообщение об успешном сохранении
            }
            else { // Если массив пустой
                cout << "Нет данных" << endl << endl; // Сообщение о пустом массиве
            }
            break;

        case MENU_ITEM::QUIT: // Если выбрано завершение программы
            cout << "\nЗавершение работы программы.\n"; // Сообщение о завершении программы
            break;

        default: // В случае некорректного ввода
            cout << "Неправильный ввод. Попробуйте снова." << endl; // Сообщение об ошибке
            break;
        }

    } while (choice != MENU_ITEM::QUIT); // Повторять цикл, пока пользователь не выберет выход из программы

    return EXIT_SUCCESS; // Возврат успешного завершения программы
}
